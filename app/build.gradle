buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}
apply plugin: "androidx.navigation.safeargs"
apply plugin: 'io.fabric'
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId "com.dani_chuks.andeladeveloper.starwars"
        minSdkVersion 15
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    flavorDimensions "version"
    productFlavors {
        staging {
            dimension "version"
        }
        production {
            dimension "version"
        }
    }

    signingConfigs {
        debug {
            storeFile rootProject.file("app/debug_keystore")
            storePassword "starwars"
            keyAlias "starwars"
            keyPassword "starwars"
        }
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile rootProject.file("app/starwars_keystore")
            storePassword keystoreProperties['storePassword']
        }
    }



    buildTypes {
        debug {
            minifyEnabled false
//            Gradle crashlytics release config
//            ext.betaDistributionReleaseNotes = releaseNotes
//            ext.betaDistributionGroupAliases = keystoreProperties['group']
            signingConfig signingConfigs.debug
        }

        release {
            minifyEnabled false
//            Gradle crashlytics release config
//            ext.betaDistributionReleaseNotes = releaseNotes
//            ext.betaDistributionGroupAliases = keystoreProperties['group']
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        compileOptions {
            targetCompatibility 1.8
            sourceCompatibility 1.8
        }
    }

    dependencies {

        def lifecycle_version = "2.0.0"
        def room_version = "2.1.0-alpha03"
        def android_x = "1.0.0"
        def constraint_layout = "1.1.3"
        def retrofit = "2.4.0"

        implementation fileTree(dir: 'libs', include: ['*.jar'])
        androidTestImplementation('com.android.support.test.espresso:espresso-core:3.0.2', {
            exclude group: 'com.android.support', module: 'support-annotations'
        })
        implementation "androidx.legacy:legacy-support-v4:$android_x"
        implementation "androidx.recyclerview:recyclerview:$android_x"
        implementation "androidx.constraintlayout:constraintlayout:$constraint_layout"
        implementation "androidx.cardview:cardview:$android_x"
        implementation "com.google.android.material:material:1.1.0-alpha04"
        testImplementation 'junit:junit:4.12'
        androidTestImplementation 'androidx.test:runner:1.1.1'
        androidTestImplementation 'androidx.test:rules:1.1.1'
        // Optional -- Hamcrest library
        androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
        // Optional -- UI testing with Espresso
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
        // Optional -- UI testing with UI Automator
        androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

//    fabric
        implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
            transitive = true;
        }

        // ViewModel and LiveData
        implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
        kapt "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"

        // optional - Coroutines support for Room
        implementation "androidx.room:room-coroutines:$room_version"

        // Test helpers
        testImplementation "androidx.room:room-testing:$room_version"

        //  Room
        implementation "androidx.room:room-runtime:$room_version"
        kapt "androidx.room:room-compiler:$room_version"

        // optional - RxJava support for Room
        implementation "androidx.room:room-rxjava2:$room_version"

        implementation 'io.reactivex.rxjava2:rxjava:2.2.6'
        implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'

        // retrofit
        implementation "com.squareup.retrofit2:retrofit:$retrofit"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit"
        implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit"
        implementation "com.squareup.okhttp3:logging-interceptor:3.13.1"
        implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:0.9.2"
        implementation 'com.squareup.picasso:picasso:2.5.2'

        // dependency injection
        implementation 'com.google.dagger:dagger-android:2.21'
        implementation "com.google.dagger:dagger-android-support:2.21"
        kapt "com.google.dagger:dagger-compiler:2.21"
        kapt "com.google.dagger:dagger-android-processor:2.21"
        compileOnly 'javax.annotation:jsr250-api:1.0'
        implementation 'javax.inject:javax.inject:1'

        // Coroutine
        implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.1.1'

        // Kotlin
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    }
}